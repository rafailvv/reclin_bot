import asyncio
import logging
import json
from datetime import datetime, timedelta
from calendar import monthrange

import aiohttp
from aiohttp import BasicAuth
from sqlalchemy import select, func
from sqlalchemy.exc import SQLAlchemyError

from app.db.db import AsyncSessionLocal
from app.db.models import User, Mailing, MailingStatus, MailingSchedule, Material, MaterialView
from app.config import config
from aiogram.types import MessageEntity, InputMediaPhoto, InputMediaDocument, InputMediaVideo


async def mailing_scheduler(bot):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è.
    –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É, —Ç–∞–∫ –∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–≤ —Ç–æ–º —á–∏—Å–ª–µ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º).
    –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—è file_ids, caption –∏ caption_entities –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥
        logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Ä–∞—Å—Å—ã–ª–æ–∫...")
        now = datetime.utcnow()

        try:
            async with AsyncSessionLocal() as session:
                async with session.begin():
                    # –ò—â–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö next_run <= now
                    stmt = select(MailingSchedule).where(
                        MailingSchedule.active == 1,
                        MailingSchedule.next_run <= now
                    )
                    schedules_to_run = (await session.scalars(stmt)).all()

                    if not schedules_to_run:
                        logging.info("‚úÖ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                    else:
                        logging.info(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(schedules_to_run)} —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

                    for schedule in schedules_to_run:
                        mailing = schedule.mailing
                        if not mailing or mailing.active != 1:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ä–∞—Å—Å—ã–ª–∫–∏
                        mailing_statuses = (await session.scalars(
                            select(MailingStatus).where(MailingStatus.mailing_id == mailing.id)
                        )).all()

                        # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "keyword:", –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                        if any(ms.user_status.startswith("keyword:") for ms in mailing_statuses):
                            keyword_statuses = [ms.user_status for ms in mailing_statuses if ms.user_status.startswith("keyword:")]
                            keywords = [s.split(":", 1)[1].strip() for s in keyword_statuses]
                            if not keywords:
                                logging.error(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ '{mailing.title}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.")
                                continue

                            materials_result = await session.scalars(select(Material).where(Material.keyword.in_(keywords)))
                            materials_list = materials_result.all()
                            if not materials_list:
                                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ {keywords} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ '{mailing.title}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.")
                                continue

                            material_ids = [material.id for material in materials_list]
                            mviews = await session.scalars(select(MaterialView).where(MaterialView.material_id.in_(material_ids)))
                            mviews_list = mviews.all()
                            user_ids = [mv.user_id for mv in mviews_list]
                            if user_ids:
                                users_result = await session.scalars(select(User).where(User.id.in_(user_ids)))
                                users_list = users_result.all()
                            else:
                                users_list = []
                        else:
                            # –¢–∞—Ä–≥–µ—Ç–∏–Ω–≥ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                            all_statuses = [ms.user_status.lower() for ms in mailing_statuses]
                            non_admin_statuses = [st for st in all_statuses if st != "–∞–¥–º–∏–Ω—ã"]
                            users_list = []
                            users_by_status = await session.scalars(
                                select(User).where(func.lower(User.status).in_(non_admin_statuses))
                            )
                            users_list.extend(users_by_status.all())
                            if "–∞–¥–º–∏–Ω—ã" in all_statuses:
                                admin_users = await session.scalars(
                                    select(User).where(User.tg_id.in_(map(str, config.ADMIN_IDS)))
                                )
                                users_list.extend(admin_users.all())

                        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ tg_id
                        unique_users = set({u.tg_id: u for u in users_list if u.tg_id}.values())

                        # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–∏–π, caption –∏ caption_entities
                        success_count = 0
                        error_count = 0
                        for u in unique_users:
                            try:
                                attachments = json.loads(mailing.file_ids)
                                entities = None
                                if mailing.caption_entities:
                                    try:
                                        entities = [MessageEntity(**entity) for entity in json.loads(mailing.caption_entities)]
                                    except Exception as e:
                                        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ caption_entities: {e}")
                                        entities = None
                                if attachments and len(attachments) > 1:
                                    input_media = []
                                    for idx, att in enumerate(attachments):
                                        if att["type"] == "photo":
                                            media_obj = InputMediaPhoto(
                                                media=att["file_id"],
                                                caption=mailing.caption if (idx == 0 and mailing.caption) else None,
                                                caption_entities=entities if (idx == 0 and mailing.caption) else None,
                                                parse_mode=None,
                                            )
                                        elif att["type"] == "document":
                                            media_obj = InputMediaDocument(
                                                media=att["file_id"],
                                                caption=mailing.caption if (idx == 0 and mailing.caption) else None,
                                                caption_entities=entities if (idx == 0 and mailing.caption) else None,
                                                parse_mode=None,
                                            )
                                        elif att["type"] == "video":
                                            media_obj = InputMediaVideo(
                                                media=att["file_id"],
                                                caption=mailing.caption if (idx == 0 and mailing.caption) else None,
                                                caption_entities=entities if (idx == 0 and mailing.caption) else None,
                                                parse_mode=None,
                                            )
                                        input_media.append(media_obj)
                                    await bot.send_media_group(chat_id=u.tg_id, media=input_media)
                                elif attachments and len(attachments) == 1:
                                    att = attachments[0]
                                    if att["type"] == "photo":
                                        await bot.send_photo(
                                            chat_id=u.tg_id,
                                            photo=att["file_id"],
                                            caption=mailing.caption,
                                            caption_entities=entities,
                                            parse_mode=None,
                                        )
                                    elif att["type"] == "document":
                                        await bot.send_document(
                                            chat_id=u.tg_id,
                                            document=att["file_id"],
                                            caption=mailing.caption,
                                            caption_entities=entities,
                                            parse_mode=None,
                                        )
                                    elif att["type"] == "video":
                                        await bot.send_video(
                                            chat_id=u.tg_id,
                                            video=att["file_id"],
                                            caption=mailing.caption,
                                            caption_entities=entities,
                                            parse_mode=None,
                                        )
                                else:
                                    await bot.send_message(
                                        chat_id=u.tg_id,
                                        text=mailing.caption,
                                        entities=entities,
                                        parse_mode=None,
                                    )
                                success_count += 1
                            except Exception as e:
                                logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {u.tg_id}: {e}")
                                error_count += 1

                        logging.info(
                            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ '{mailing.title}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")

                        # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë
                        if schedule.schedule_type == "once":
                            schedule.active = 0
                            logging.info(f"üõë –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ '{mailing.title}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                        else:
                            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º next_run –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                            schedule.next_run = compute_next_run(schedule)

                        await session.commit()

        except Exception as e:
            logging.error(f"‚ö† –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
            await asyncio.sleep(60)  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∂–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º


async def fetch_users():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API —Å Basic Auth.
    """
    async with aiohttp.ClientSession() as session:
        auth = BasicAuth(config.USERNAME, config.PASSWORD)
        try:
            async with session.get(config.API_URL + "users/", auth=auth) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
                    return None
        except aiohttp.ClientError as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            return None


async def update_database(bot):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ API.
    """
    logging.info("–ù–∞—á–∞–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î")
    while True:
        async with AsyncSessionLocal() as session:
            try:
                users = await fetch_users()
                if not users:
                    logging.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API.")
                    await asyncio.sleep(60 * 5)
                    continue
                for user_data in users:
                    wp_id = user_data.get("id_user")
                    first_name = user_data.get("name_user")
                    last_name = user_data.get("surname_user")
                    status = user_data.get("last_tarif_status")
                    if status == "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞":
                        status = user_data.get("last_Tarif_name")
                    created_at = datetime.strptime(user_data.get("registration_date"), "%Y-%m-%d %H:%M:%S")

                    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    result = await session.execute(select(User).where(User.wp_id == wp_id))
                    user = result.scalars().first()

                    if user:
                        updated = False
                        if user.status != status:
                            user.status = status
                            updated = True
                        if user.created_at is None:
                            user.created_at = created_at
                            updated = True
                        if user.first_name != first_name:
                            user.first_name = first_name
                            updated = True
                        if user.last_name != last_name:
                            user.last_name = last_name
                            updated = True

                        if updated:
                            session.add(user)

                await session.commit()
                logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

            except SQLAlchemyError as e:
                logging.info(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                await session.rollback()
            except Exception as e:
                logging.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

        await asyncio.sleep(60 * 5)


def compute_next_run(schedule: MailingSchedule) -> datetime:
    """
    –†–∞—Å—á—ë—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    now = datetime.utcnow()

    if schedule.schedule_type == "daily":
        return schedule.next_run + timedelta(days=1)

    elif schedule.schedule_type == "weekly":
        if schedule.day_of_week:
            days = sorted(int(d.strip()) for d in schedule.day_of_week.split(","))
            for day in days:
                offset = (day - 1) - schedule.next_run.weekday()
                if offset <= 0:
                    offset += 7
                candidate = schedule.next_run + timedelta(days=offset)
                if candidate > now:
                    return candidate
            return schedule.next_run + timedelta(days=7)

    elif schedule.schedule_type == "monthly":
        if schedule.day_of_month:
            days = sorted(int(d.strip()) for d in schedule.day_of_month.split(","))
            for day in days:
                month, year = schedule.next_run.month, schedule.next_run.year
                found_valid_date = False
                while not found_valid_date:
                    try:
                        candidate = schedule.next_run.replace(day=day, month=month, year=year)
                        if candidate > now:
                            return candidate
                    except ValueError:
                        pass
                    month += 1
                    if month > 12:
                        month = 1
                        year += 1
                    last_day_of_month = monthrange(year, month)[1]
                    if day <= last_day_of_month:
                        found_valid_date = True
                        return datetime(year, month, day, schedule.next_run.hour, schedule.next_run.minute)

    # –î–ª—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule.active = 0
    return now
