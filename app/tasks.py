import asyncio
import logging
from datetime import datetime

import aiohttp
from aiohttp import BasicAuth
from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError

from app.db.db import AsyncSessionLocal
from app.db.models import User, Mailing, MailingStatus, MailingSchedule
from app.config import config

from datetime import datetime, timedelta
from calendar import monthrange


async def mailing_scheduler(bot):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è.
    """
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Ä–∞—Å—Å—ã–ª–æ–∫...")
        now = datetime.utcnow()

        try:
            async with AsyncSessionLocal() as session:
                async with session.begin():
                    # –ò—â–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö next_run <= now
                    stmt = select(MailingSchedule).where(
                        MailingSchedule.active == 1,
                        MailingSchedule.next_run <= now
                    )
                    schedules_to_run = (await session.scalars(stmt)).all()

                    if not schedules_to_run:
                        logging.info("‚úÖ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                    else:
                        logging.info(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(schedules_to_run)} —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

                    for schedule in schedules_to_run:
                        mailing = schedule.mailing
                        if not mailing or mailing.active != 1:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                        statuses_stmt = select(MailingStatus).where(
                            MailingStatus.mailing_id == mailing.id
                        )
                        mailing_statuses = (await session.scalars(statuses_stmt)).all()
                        statuses_list = [ms.user_status for ms in mailing_statuses]

                        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
                        users_stmt = select(User).where(User.status.in_(statuses_list))
                        users = (await session.scalars(users_stmt)).all()

                        # –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –µ—Å—Ç—å "–∞–¥–º–∏–Ω—ã", –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –≤ —Ä–∞—Å—Å—ã–ª–∫—É
                        if "–∞–¥–º–∏–Ω—ã" in statuses_list:
                            admin_users_stmt = select(User).where(User.tg_id.in_(map(str, config.ADMIN_IDS)))
                            admin_users = (await session.scalars(admin_users_stmt)).all()
                            users.extend(admin_users)

                        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –ø–æ–ø–∞–ª –ø–æ —Ä–∞–∑–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º)
                        unique_users = {u.tg_id: u for u in users}.values()

                        # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                        success_count = 0
                        error_count = 0
                        for u in unique_users:
                            if not u.tg_id:
                                continue
                            try:
                                await bot.copy_message(
                                    chat_id=u.tg_id,
                                    from_chat_id=mailing.saved_chat_id,
                                    message_id=mailing.saved_message_id
                                )
                                success_count += 1
                            except Exception as e:
                                logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {u.tg_id}: {e}")
                                error_count += 1

                        logging.info(
                            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ '{mailing.title}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")

                        # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–µ
                        if schedule.schedule_type == "once":
                            schedule.active = 0
                            logging.info(f"üõë –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ '{mailing.title}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                        else:
                            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º `next_run` –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                            schedule.next_run = compute_next_run(schedule)

                        await session.commit()

        except Exception as e:
            logging.error(f"‚ö† –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
            await asyncio.sleep(60)  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∂–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

async def fetch_users():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API —Å Basic Auth.
    """
    async with aiohttp.ClientSession() as session:
        auth = BasicAuth(config.USERNAME, config.PASSWORD)
        try:
            async with session.get(config.API_URL + "users/", auth=auth) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
                    return None
        except aiohttp.ClientError as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            return None

async def update_database(bot):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ API.
    """
    logging.info("–ù–∞—á–∞–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î")
    while True:
        async with AsyncSessionLocal() as session:
            try:
                users = await fetch_users()
                if not users:
                    logging.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API.")
                    await asyncio.sleep(60 * 5)
                    continue
                for user_data in users:
                    wp_id = user_data.get("id_user")
                    first_name = user_data.get("name_user")
                    last_name = user_data.get("surname_user")
                    status = user_data.get("last_tarif_status")
                    created_at = datetime.strptime(user_data.get("registration_date"), "%Y-%m-%d %H:%M:%S")

                    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    result = await session.execute(select(User).where(User.wp_id == wp_id))
                    user = result.scalars().first()

                    if user:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        updated = False
                        if user.status != status:
                            user.status = status
                            updated = True
                        if user.created_at is None:
                            user.created_at = created_at
                            updated = True
                        if user.first_name != first_name:
                            user.first_name = first_name
                            updated = True
                        if user.last_name != last_name:
                            user.last_name = last_name
                            updated = True

                        if updated:
                            session.add(user)

                await session.commit()
                logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

            except SQLAlchemyError as e:
                logging.info(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                await session.rollback()
            except Exception as e:
                logging.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

        await asyncio.sleep(60 * 5)


def compute_next_run(schedule: MailingSchedule) -> datetime:
    """
    –†–∞—Å—á—ë—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    now = datetime.utcnow()

    if schedule.schedule_type == "daily":
        return schedule.next_run + timedelta(days=1)

    elif schedule.schedule_type == "weekly":
        if schedule.day_of_week:
            days = sorted(int(d.strip()) for d in schedule.day_of_week.split(","))

            for day in days:
                offset = (day - 1) - schedule.next_run.weekday()
                if offset <= 0:
                    offset += 7
                candidate = schedule.next_run + timedelta(days=offset)
                if candidate > now:
                    return candidate

            return schedule.next_run + timedelta(days=7)

    elif schedule.schedule_type == "monthly":
        if schedule.day_of_month:
            days = sorted(int(d.strip()) for d in schedule.day_of_month.split(","))

            for day in days:
                month, year = schedule.next_run.month, schedule.next_run.year
                found_valid_date = False

                while not found_valid_date:
                    try:
                        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–∞—Ç—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–Ω–µ–º
                        candidate = schedule.next_run.replace(day=day, month=month, year=year)
                        if candidate > now:
                            return candidate
                    except ValueError:
                        # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                        pass

                    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                    month += 1
                    if month > 12:
                        month = 1
                        year += 1

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –¥–µ–Ω—å –≤ –Ω–æ–≤–æ–º –º–µ—Å—è—Ü–µ
                    last_day_of_month = monthrange(year, month)[1]
                    if day <= last_day_of_month:
                        found_valid_date = True
                        return datetime(year, month, day, schedule.next_run.hour, schedule.next_run.minute)

    # –ï—Å–ª–∏ —Ç–∏–ø "once", —Ä–∞—Å—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è
    schedule.active = 0
    return now
