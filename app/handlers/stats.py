import logging
import os
from datetime import datetime

from aiogram import Router, types, Bot
from aiogram.filters import Command

from app.config import config
from app.db.db import AsyncSessionLocal
from app.utils.helpers import get_user_statistics, get_keyword_info, get_user_info, \
    export_statistics_to_excel

stats_router = Router()

@stats_router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    if message.chat.id not in config.ADMIN_IDS:
        return
    async with AsyncSessionLocal() as session:
        stats = await get_user_statistics(session)
        reply_text = (
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        )
        for cat, cnt in stats["category_data"]:
            reply_text += f"  - {cat}: {cnt}\n"

        await message.answer(reply_text)

@stats_router.message(Command("export_stats"))
async def cmd_export_stats(message: types.Message):
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞.
    """
    if message.chat.id not in config.ADMIN_IDS:
        return
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    file_path = f"users_stats_{timestamp}.xlsx"  # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
    message = await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    async with AsyncSessionLocal() as session:
        file_path = await export_statistics_to_excel(session, file_path)
    await message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_document(document=types.FSInputFile(file_path))

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —Å–µ—Ä–≤–µ—Ä)
    if os.path.exists(file_path):
        os.remove(file_path)

@stats_router.message(Command("keyword_info"))
async def cmd_keyword_info(message: types.Message, bot: Bot):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É.
    """
    if message.chat.id not in config.ADMIN_IDS:
        return
    keyword = message.text.split(" ", 1)[-1]  # –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    async with AsyncSessionLocal() as session:
        info = await get_keyword_info(session, keyword)
        if not info:
            await message.answer("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
            await bot.copy_message(
                chat_id=message.chat.id,
                from_chat_id=info['chat_id'],  # –æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
                message_id=info['message_id']  # –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await message.answer("–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        reply_text = (
            f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: <b>{info['keyword']}</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: <b>{info['view_count']}</b>\n"
            "\n–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n"
        )

        if info["links"]:
            for link_data in info["links"]:
                link_text = f"{link_data['link']}\n"
                if link_data["expiration_date"]:
                    link_text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{link_data['expiration_date'].strftime('%d.%m.%Y %H:%M')}</b>\n"
                link_text += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–ª–∏–∫–æ–≤: <b>{link_data['max_clicks']}</b>\n"
                reply_text += link_text
        else:
            reply_text += "–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.\n"

        await message.answer(reply_text)


@stats_router.message(Command("user_info"))
async def cmd_user_info(message: types.Message):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ ID, username –∏–ª–∏ –∏–º–µ–Ω–∏).
    """
    if message.chat.id not in config.ADMIN_IDS:
        return
    query = message.text.split(" ", 1)[-1].strip()  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã

    if not query:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ Telegram ID, username (@username) –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    async with AsyncSessionLocal() as session:
        info = await get_user_info(session, query)
        if not info:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_info = info["user"]
        reply_text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"Telegram ID: <a href='tg://user?id={user_info['tg_id']}'>{user_info['tg_id']}</a>\n"
        )

        if user_info.get("username"):
            reply_text += f"Username: @{user_info['username']}\n"

        reply_text += (
            f"–ò–º—è: <b><a href='tg://user?id={user_info['tg_id']}'>{user_info['first_name']}</a></b>\n"
            f"–°—Ç–∞—Ç—É—Å: <b>{user_info['status']}</b>\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{user_info['created_at'].strftime('%d.%m.%Y %H:%M')}</b>\n\n"
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
        )

        for material in info["viewed_materials"]:
            reply_text += (
                f"- –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: <b>{material['keyword']}</b>\n"
                f"- –î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: <b>{material['viewed_at'].strftime('%d.%m.%Y %H:%M')}</b>\n"
            )

        await message.answer(reply_text, parse_mode="HTML")

@stats_router.message(Command("info"))
async def cmd_info(message: types.Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.
    """
    if message.chat.id not in config.ADMIN_IDS:
        return
    info_text = (
        "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "üì¢ */broadcast* ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)\n"
        "üìä */stats* ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "üìÇ */export_stats* ‚Äî —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel\n"
        "üîë */keyword_info <–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ>* ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É\n"
        "üë§ */user_info <ID | @username | –∏–º—è>* ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "‚ÑπÔ∏è */info* ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n"
        "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º!"
    )

    await message.answer(info_text, parse_mode="Markdown")
