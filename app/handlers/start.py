# start.py

import logging
from datetime import datetime
from aiogram import Router, types, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
from sqlalchemy import select
from sqlalchemy.orm import joinedload

from app.config import config
from app.db.db import AsyncSessionLocal
from app.db.models import User, KeywordLink, Material, MaterialView
from app.utils.helpers import get_or_create_user

start_router = Router()

@start_router.message(CommandStart())
async def cmd_start(message: types.Message, bot: Bot,  state: FSMContext):
    """
    /start handler: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ?start=keyword_<unique_link>
    """
    params = message.text.split(maxsplit=1)
    await state.clear()
    if len(params) > 1:
        start_param = params[1]
        if start_param.startswith("keyword_"):
            link_str = start_param.replace("keyword_", "", 1)

            async with AsyncSessionLocal() as session:
                # –ò—â–µ–º KeywordLink
                stmt = (
                    select(KeywordLink)
                    .join(KeywordLink.material)  # –°–æ–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                    .where(Material.keyword == link_str)  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ keyword –≤ —Ç–∞–±–ª–∏—Ü–µ Material
                    .options(joinedload(KeywordLink.material))  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Material
                )
                link_obj = await session.scalar(stmt)
                if not link_obj:
                    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –∏ –∫–ª–∏–∫–∏
                now = datetime.utcnow()
                if (link_obj.expiration_date and now > link_obj.expiration_date) \
                   or (link_obj.max_clicks is not None and link_obj.click_count >= link_obj.max_clicks):
                    await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –∫–ª–∏–∫–æ–≤.")
                    return

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ —á–µ—Ä–µ–∑ SQL-–∑–∞–ø—Ä–æ—Å
                update_stmt = (
                    KeywordLink.__table__.update()
                    .where(KeywordLink.id == link_obj.id)
                    .values(click_count=KeywordLink.click_count + 1)
                )
                await session.execute(update_stmt)

                # –ü–æ–ª—É—á–∞–µ–º Material
                material = link_obj.material
                if not material or not material.chat_id or not material.message_id:
                    await message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
                    return

                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await get_or_create_user(session, message.from_user)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ MaterialView
                material_view = MaterialView(
                    user_id=user.id,
                    material_id=material.id,
                    viewed_at=datetime.utcnow()
                )
                session.add(material_view)

                # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∏ –∑–∞–ø–∏—Å—å MaterialView)
                await session.commit()

                # –î–µ–ª–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É
                try:
                    await bot.copy_message(
                        chat_id=message.chat.id,
                        from_chat_id=material.chat_id,   # –æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
                        message_id=material.message_id   # –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    await message.answer("–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                return

    await bot.send_photo(
        chat_id=message.chat.id,
        photo=FSInputFile("app/images/start.jpg"),
        caption=(
            "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ.\n\n"
            "–ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –Ω–∞—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö, –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö —Å–∞–π—Ç–∞, "
            "–∞ —Ç–∞–∫–∂–µ –¥–∞—Ä–∏—Ç—å –≤–∞–º –ø—Ä–∏—è—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.\n\n"
            "–ß–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º –Ω–∞ —Å–∞–π—Ç–µ, "
            "–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –∏–¥–µ–∏."
        )
    )


@start_router.message(Command("site"))
async def cmd_site(message: types.Message):
    await message.answer(
        "<b>–ù–∞—à —Å–∞–π—Ç —Å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏</b>\n\n"
        "–î—Ä—É–∑—å—è, –≤ —ç—Ç–æ–º –ø–æ—Å—Ç–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –≤—Å–µ –ø—Ä–æ –Ω–∞—à —Å–∞–π—Ç —Å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ Reclin.ru\n\n"
        "–ö–∞–∫ –≤—ã —É–∂–µ –ø–æ–Ω—è–ª–∏, –Ω–∞ —Å–∞–π—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ú–ó –†–§. "
        "–û–¥–Ω–∞–∫–æ, –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º—ã –±–µ—Ä–µ–º —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ "
        "—Å–∞–π—Ç–∞ –†—É–±—Ä–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - https://cr.minzdrav.gov.ru/schema/3_1. "
        "–ó–∞–Ω–∏–º–∞—é—Ç—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–æ–º–∞–Ω–¥–∞ –≤—Ä–∞—á–µ–π, –∫–∞–∂–¥—ã–π –ø–æ —Å–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏üë©‚Äç‚öïÔ∏èüë®‚Äç‚öïÔ∏è\n\n"
        "<b>–†–∞–∑–±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏—à–∫–∏ –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞:</b>\n\n"
        "‚úÖ –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∞, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç\n\n"
        "‚úÖ –í—Å–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏, —Å—Ö–µ–º–∞–º–∏ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏\n\n"
        "‚úÖ –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–æ–∑–∏—Ä–æ–≤–æ–∫, "
        "—Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è\n\n"
        "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–∞—Å—Å—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö –∏ —É–¥–æ–±–Ω—ã—Ö –≤–µ—â–µ–π –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ —Å–∫–æ—Ä–µ–µ - Reclin.ru"
    )


@start_router.message(Command("contacts"))
async def cmd_contacts(message: types.Message):
    await message.answer(
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "üìß Email - reclin2022@gmail.com\n"
        "üîó –ì—Ä—É–ø–ø–∞ –í–ö - https://vk.com/reclin\n"
        "üì¢ Telegram - https://t.me/reclinlive"
    )


@start_router.message(Command("tech"))
async def cmd_tech(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="http://t.me/reclin2022")]
        ]
    )
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ –≤—Å–µ–º —Ä–∞–∑–±–µ—Ä–µ–º—Å—è", reply_markup=keyboard)

class UserState(StatesGroup):
    waiting_for_recommendation = State()
    waiting_for_idea = State()

@start_router.message(Command("recommendations"))
async def cmd_recommendations(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ <b>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>, –∫–∞–∫—É—é –∫–ª–∏–Ω–∏—á–µ—Å–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º")
    await state.set_state(UserState.waiting_for_recommendation)

@start_router.message(UserState.waiting_for_recommendation)
async def receive_recommendation(message: types.Message, bot: Bot, state: FSMContext):
    if message.from_user.username is not None:
        await bot.send_message(config.ADMIN_IDS[0], f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={message.from_user.url}'>{message.from_user.full_name}</a> (@{message.from_user.username}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:\n\n{message.text}")
    else:
        await bot.send_message(config.ADMIN_IDS[0], f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={message.from_user.url}'>{message.from_user.full_name}</a> –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:\n\n{message.text}")

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    await state.clear()

@start_router.message(Command("ideas"))
async def cmd_ideas(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∞–π—Ç–∞. –ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –Ω–∞ —Å–∞–π—Ç–µ, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –æ –Ω–µ–π <b>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>.")
    await state.set_state(UserState.waiting_for_idea)

@start_router.message(UserState.waiting_for_idea)
async def receive_idea(message: types.Message, bot: Bot, state: FSMContext):
    if message.from_user.username is not None:
        await bot.send_message(config.ADMIN_IDS[0], f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={message.from_user.url}'>{message.from_user.full_name}</a> (@{message.from_user.username}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–¥–µ—é/–æ—à–∏–±–∫—É:\n\n{message.text}")
    else:
        await bot.send_message(config.ADMIN_IDS[0], f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={message.from_user.url}'>{message.from_user.full_name}</a> –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–¥–µ—é/–æ—à–∏–±–∫—É:\n\n{message.text}")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    await state.clear()